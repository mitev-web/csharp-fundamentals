using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

class Crossword
{
    public static string[] words = { "FIRE", "ACID", "CENG", "EDGE", "FACE", "ICED", "RING", "CERN" };
    static int N = 4;

    //static int N;
    //public static string[] words;
    static List<string> crossWords = new List<string>();
    static char[,] board = new char[N,N];

    static void Main(string[] args)
    {
       // InputWords();

     
        int[] rgNum = new int[100];
        int i;

        /* create a workspace of numbers in their respective places */
        for (i = 1; i <= N*2; i++)
        {
            rgNum[i] = i;
        }

        GeneratePermutation(1, N * 2, rgNum);
     
        PrintResult();
        
    }

    private static void InputWords()
    {
        N = int.Parse(Console.ReadLine());
        board = new char[N, N];
        words = new string[N * 2];
        for (int i = 0; i < N * 2; i++)
        {
            words[i] = Console.ReadLine();
        }
    }
  
    private static void PrintResult()
    {
        if (crossWords.Count > 0)
        {
            string e = (from s in crossWords
                        orderby s
                        select s).First();
            StringBuilder sb = new StringBuilder();
            
            for (int i = 0; i < N * N; i++)
            {
                if (i % N == 0)
                {
                    sb.Append(Environment.NewLine);
                }
                sb.Append(e[i]);
            }
            Console.WriteLine(sb.ToString().Trim());
        }
        else
        {
            Console.WriteLine("NO SOLUTION!");
        }
    }

    public static void PrintBoard()
    {
        for (int row = 0; row < N; row++)
        {
            for (int col = 0; col < N; col++)
            {
                Console.Write(board[row, col]);
            }
            Console.WriteLine();
        }
        Console.WriteLine();
    }

    static void GeneratePermutation(int k, int max, int[] nums)
    {
        int i, j, tmp;

        /* when k > n we are done and should print */
        if (k <= max)
        {
            for (i = k; i <= max; i++)
            {
                tmp = nums[i];
                for (j = i; j > k; j--)
                {
                    nums[j] = nums[j - 1];
                }
                nums[k] = tmp;

                /* recurse on k+1 to n */
                GeneratePermutation(k + 1, max, nums);

                for (j = k; j < i; j++)
                {
                    nums[j] = nums[j + 1];
                }
                nums[i] = tmp;
            }
        }
        else
        {
            int count = 0;
            for (i = 1; i <= max; i++)
            {
                for (int col = 0; col < N; col++)
                {
                    if (count == N)
                    {
                        if (IsCrossword())
                        {
                            string boardStr = BoardToString();
                            if (!crossWords.Contains(boardStr))
                            {
                                crossWords.Add(boardStr);
                            }
                        }

                        count = 0;
                    }
                    board[count, col] = words[nums[i] - 1][col];
                    //Console.Write(words[nums[i] - 1]+" ");
                }

                count++;
            }
            //Console.WriteLine();
        }
    }

    private static bool IsCrossword()
    {
        StringBuilder sb = new StringBuilder();
        bool isCrossword = true;

        //check vertical
        for (int row = 0; row < N; row++)
        {
            for (int col = 0; col < N; col++)
            {
                sb.Append(board[row, col]);
            }

            if (!words.Contains(sb.ToString()))
            {
                isCrossword = false;
            }
            sb.Clear();
        }
        //check horizontal
        for (int col = 0; col < N; col++)
        {
            for (int row = 0; row < N; row++)
            {
                sb.Append(board[row, col]);
            }

            if (!words.Contains(sb.ToString()))
            {
                isCrossword = false;
            }
            sb.Clear();
        }

        return isCrossword;
    }

    private static string BoardToString()
    {
        StringBuilder sb = new StringBuilder();
        
        for (int row = 0; row < N; row++)
        {
            for (int col = 0; col < N; col++)
            {
                sb.Append(board[row, col]);
            }
        }
        return sb.ToString();
    }

    private static void Print(int[] arr)
    {
        foreach (var item in arr)
        {
            Console.Write(" {0} ", words[item]);
        }
        Console.WriteLine();
    }
}